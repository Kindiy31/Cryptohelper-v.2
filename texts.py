import coinmarketcap
dbase_markets = 'markets'
is_active = 'is_active'
dbase_users = 'users'
dbase_tokens = 'tokens'

class ua_language:
    def __init__(self):
        self.name = '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'
        self.coinmarket = 'CoinMarketCap'
    def markets(self):
        return '–ë—ñ—Ä–∂—ñ üè¶'

    def wallet(self):
        return '–ú—ñ–π –≥–∞–º–∞–Ω–µ—Ü—å üíº'

    def tokens(self):
        return '–¢–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∏ üîÅ'

    def tickers(self):
        return '–¢–æ–∫–µ–Ω–∏ ü™ô'

    def messages(self):
        return '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚úçÔ∏è'

    def start_msg(self):
        return 'üè† –í—ñ—Ç–∞—é –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é'

    def markets_msg(self):
        return f'üè¶ –û—Å—å —è–∫—ñ –±—ñ—Ä–∂—ñ –≤ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ.\n\n' \
               f'üìà–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–º–∫–Ω—É—Ç–∏ —Ç–∞ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –±—ñ—Ä–∂—É, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ —á–æ–≥–æ –≤–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–∏—Ç–µ —Ü—ñ–Ω–∏ –∑–∞–π—à–æ–≤—à–∏ –≤ –º–µ–Ω—é {self.tokens()}'

    def tokens_msg(self):
        return 'ü™ô –û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É, —Ü—ñ–Ω—É —è–∫–æ—ó –±–∞–∂–∞—î—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å'

    def add_token(self):
        return '–î–æ–¥–∞—Ç–∏ –ø–∞—Ä—É ‚ûï'

    def remove_token(self):
        return '–í–∏–¥–∞–ª–∏—Ç–∏ –ø–∞—Ä—É üóë'

    def back(self):
        return '‚¨ÖÔ∏è–ù–∞–∑–∞–¥'

    def insert_pair(self):
        return '''‚ûï –Ø–∫—â–æ –í–∏ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É - –Ω–∞–ø–∏—à—ñ—Ç—å —ó—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ token_1/token_2.
        
–ù–∞–ø—Ä–∏–∫–ª–∞–¥: BTC/USDT, ETH/USDT, USDT/UAH —Ç–æ—â–æ.'''

    def pair_append(self, name):
        return f'–ü–∞—Ä—É {name} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ‚úÖ'

    def error_format(self):
        return '–í–≤–µ–¥–µ–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ‚ÄºÔ∏è'

    def token_remove_approved(self):
        return '–ü–∞—Ä—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ üóë'

    def set_price(self):
        return '–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–Ω—É ü´∞'

    def how_price(self, price_now):
        return f'üó£ –ü—Ä–∏ —è–∫—ñ–π —Ü—ñ–Ω—ñ –≤–∞—Å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏?\n\nüìà –¶—ñ–Ω–∞ –∑–∞—Ä–∞–∑: {next(iter(price_now.values()))}'

    def error(self):
        return '–•–º–º... –í–∏–Ω–∏–∫–ª–∞ –¥–∏–≤–Ω–∞ –ø–æ–º–∏–ª–∫–∞ ‚ÄºÔ∏è'

    def we_send_you(self, name, price):
        return f'üó£ –ú–æ–∂–µ—Ç–µ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏, —è –ø–æ–≤—ñ–¥–æ–º–ª—é –í–∞—Å –∫–æ–ª–∏ —Ü—ñ–Ω–∞ —É –ø–∞—Ä—ñ {name} –±—É–¥–µ {price}!'

    def price_changed(self, name, price):
        return f'üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –Ω–∞–¥—ñ—é—Å—å –≤–∏ –¥–æ–±—Ä–µ –≤—ñ–¥–ø–æ—á–∏–ª–∏, –∑–∞ —Ü–µ–π —á–∞—Å —Ü—ñ–Ω–∞ —É –ø–∞—Ä—ñ {name} –¥–æ—Å—è–≥–ª–∞ {price}!'

    def no_wallet(self):
        return 'üíº –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≥–∞–º–∞–Ω—Ü—è, —è–∫—â–æ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ - –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É'

    def new_address(self, address):
        return f'–í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å —ñ–∑ –∞–¥—Ä–µ—Å–æ—é {address} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! üôã'

    def your_wallet(self, address, balance, equivalents):
        msg = f'''üíº  –í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å: `{address}`

üí≥ –ë–∞–ª–∞–Ω—Å ETH: `{balance}`

'''
        for equivalent in equivalents:
            ticker = next(iter(equivalent.keys()))
            msg += f'''üìà –¶—ñ–Ω–∞ –∑–∞ 1 ETH: `{equivalent.get(ticker).get('price')}` {ticker}
üí≥ –ï–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç {ticker}: `{equivalent.get(ticker).get('equivalent')}`

'''
        return msg

    def new_transaction(self, check_hash, address):
        hash = check_hash.get('hash')
        block_number = check_hash.get('blockNumber')
        from_address = check_hash.get('from')
        to_address = check_hash.get('to')
        amount = int(check_hash.get('value')) / 10 ** 18
        fee = int(check_hash.get('gas')) / 10 ** 18
        if address == from_address:
            type = '‚¨áÔ∏è–í–∏–≤—ñ–¥'
        else:
            type = '‚¨ÜÔ∏è–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è'
        msg = f'''üó£ –£ –≤–∞—Å –Ω–æ–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —É –≥–∞–º–∞–Ω—Ü—ñ –∑ –∞–¥—Ä–µ—Å–æ—é `{address}`!

üìú –•–µ—à: `{hash}`
üí∞ –°—É–º–∞: `{amount} ETH`
ü´∞ –ö–æ–º—ñ—Å—ñ—è: `{fee} ETH`
üóÑ –ù–æ–º–µ—Ä –±–ª–æ–∫—É: `{block_number}`
üôã‚Äç‚ôÇÔ∏è –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: `{from_address}`
üßè‚Äç‚ôÇÔ∏è –û—Ç—Ä–∏–º—É–≤–∞—á: `{to_address}`
üëÄ –¢–∏–ø: {type}
'''
        return msg
    def messages_msg(self):
        return '''üó£ –í –¥–∞–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –≤–∏ –∑–º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Ç–∞ –≤–∏–º–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É –≤–∞—à–æ–º—É –≥–∞–º–∞–Ω—Ü—ñ.
        
–£–≤–∞–≥–∞‚ÄºÔ∏è –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏–º—É—Ç—å –ª–∏—à–µ —è–∫—â–æ –≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–æ –≥–∞–º–∞–Ω–µ—Ü—å —Ç–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–∞ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è‚ùóÔ∏è'''

    def on(self):
        return '–£–≤—ñ–º–∫–Ω–µ–Ω–æ'

    def off(self):
        return '–í–∏–º–∫–Ω–µ–Ω–æ'

    def add_ticker(self):
        return '‚ûï –î–æ–¥–∞—Ç–∏ –≤–∞–ª—é—Ç—É'

    def ticker_remove_approved(self):
        return 'üóë –í–∞–ª—é—Ç—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ'

    def tickers_msg(self):
        return f'üë®‚Äçüéì –¢—É—Ç –í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –Ω–∞ –≤–∞—à—ñ –≤–∞–ª—é—Ç–∏ –∑ {self.coinmarket}'

    def insert_ticker(self):
        return '–í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: BTC, ETH, USDT —Ç–æ—â–æ.'

    def ticker_append(self, name):
        return f'–í–∞–ª—é—Ç—É {name} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ‚úÖ'

    def ticker_denided(self):
        return '–í–∞–ª—é—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üíÅ‚Äç‚ôÇÔ∏è'

    def ticker_info(self, info):
        msg = f'''[{info.get('name')}]({coinmarketcap.view_url}{info.get('symbol')})

*üèß –°–∏–º–≤–æ–ª*: {info.get('symbol')}
*üóÑ ID {self.coinmarket}*: {info.get('id')}
*ü•á –†–∞–Ω–≥ {self.coinmarket}*: {info.get('rank')}
*üìù –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è*: {info.get('first_historical_data')}'''
        return msg

    def remove_ticker(self):
        return '–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∞–ª—é—Ç—É üóë'

    def change_wallet(self):
        return '–ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É üîÅ'

    def insert_new_wallet(self):
        return '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É üñã'

    def wallet_updated(self):
        return '–ê–¥—Ä–µ—Å—É —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ'
ua = ua_language()